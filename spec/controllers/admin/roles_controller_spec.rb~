require 'spec_helper'

describe Admin::RolesController do

  # This should return the minimal set of attributes required to create a valid
  # Role. As you add validations to Role, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    { :name => "student" }
  end
  
  login_admin

  before(:each) do
    @role = Role.new
    Role.stub(:find).and_return(@role)
    Role.stub(:all).and_return([@role])
    Role.stub(:save).and_return(:true)
    Role.stub(:destroy).and_return(:true)
    Role.stub(:count).and_return(1)
    @role.stub(:update_attributes).and_return(:true)
  end

  describe "GET index" do
    it "assigns all roles as @roles" do
      get :index
      assigns(:roles).should eq([@role])
    end
  end

  describe "GET show" do
    it "assigns the requested role as @role" do
      get :show, {:id => 23}
      assigns(:role).should eq(@role)
    end
  end

  describe "GET new" do
    it "assigns a new role as @role" do
      get :new
      assigns(:role).should be_a_new(Role)
    end
  end

  describe "GET edit" do
    it "assigns the requested role as @role" do
      get :edit, {:id => 12}
      assigns(:role).should eq(@role)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Role" do
        expect {
          post :create, {:role => valid_attributes}
        }.to change(Role, :count).by(1)
      end

      it "assigns a newly created role as @role" do
        post :create, {:role => valid_attributes}
        assigns(:role).should be_a(Role)
        assigns(:role).should be_persisted
      end

      it "redirects to the created role" do
        post :create, {:role => valid_attributes}
        response.should redirect_to admin_roles_path
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved role as @role" do
        # Trigger the behavior that occurs when invalid params are submitted
        Role.any_instance.stub(:save).and_return(false)
        post :create, {:role => {}}
        assigns(:role).should be_a_new(Role)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Role.any_instance.stub(:save).and_return(false)
        post :create, {:role => {}}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested role" do
        # Assuming there are no other roles in the database, this
        # specifies that the Role created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Role.any_instance.should_recZZeive(:update_attributes).with({'these' => 'params'})
        put :update, {:id => 2, :role => {'these' => 'params'}}
      end

      it "assigns the requested role as @role" do
        put :update, {:id => 2, :role => valid_attributes}
        assigns(:role).should eq(@role)
      end

      it "redirects to the role" do
        put :update, {:id => 54, :role => valid_attributes}
        response.should redirect_to([:admin, @role])
      end
    end

    describe "with invalid params" do
      it "assigns the role as @role" do
        # Trigger the behavior that occurs when invalid params are submitted
        Role.any_instance.stub(:save).and_return(false)
        put :update, {:id => 54, :role => {}}
        assigns(:role).should eq(@role)
      end

      it "re-renders the 'edit' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Role.any_instance.stub(:save).and_return(false)
        put :update, {:id => 98, :role => {}}
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested role" do
      expect {
        delete :destroy, {:id => 32}
      }.to change(Role, :count).by(-1)
    end

    it "redirects to the roles list" do
      delete :destroy, {:id => 34}
      response.should redirect_to(admin_roles_url)
    end
  end

end
